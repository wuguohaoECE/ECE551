#include "map.h"
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <stdexcept>
using namespace std;
template<typename K, typename V>
  class BstMap: public Map <K, V>{
 private:
  //a class for each node
  class Node {
  public:
    K key;
    V value;
    Node * left;
    Node * right;
  Node(K a, V b, Node * c, Node * d): key(a), value(b), left(c), right(d) {}
    ~Node() {}
  };
  Node * root;

 public:
 BstMap():root(NULL) {}
 virtual ~BstMap(){
    destroy(root);
    root = NULL;
  }
  void destroy(Node * curr) {
    if (curr != NULL) {
      destroy(curr->left);
      destroy(curr->right);
      delete curr;
    }
  }

  Node ** lookupNode(const K& key) {
    Node ** curr = &root;
    while(*curr != NULL) {
      if( key < (*curr)->key ) {
	curr = &(*curr)->left;
      }
      else if( key > (*curr)->key ) {
	curr = &(*curr)->right;
      }
      else {
	return curr;
      }
    }
    return curr;
  }
  
  virtual void add(const K & key, const V & value) {
    Node ** curr = lookupNode(key);
    if( (*curr) != NULL ) {
      (*curr)->value = value;
      return;
    }
    *curr = new Node(key, value, NULL, NULL); 
  }
  



  
  virtual const V & lookup(const K& key) const throw (invalid_argument) {
    try {
      const Node ** curr = lookupNode(key);
      if( *curr != NULL) {
	return curr->value;
      }
      throw invalid_argument("no this key");
    }
    catch (const invalid_argument & e) {
      throw;
    }
  }

  virtual void remove(const K& key) {
    Node ** curr = lookupNode(key);
    if(*curr == NULL) {
      return;
    }
    if( (*curr)->left == NULL) {
      Node * temp = (*curr)->right;
      delete *curr;
      *curr = temp;
      return;
    }
    if( (*curr)->right == NULL) {
      Node * temp = (*curr)->left;
      delete *curr;
      *curr = temp;
      return;
    }
    return;
  }
    
  //virtual void remove(const K& key) {
    
  
};
